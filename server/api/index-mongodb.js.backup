// api/index.js - Main serverless function entry point
import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

const app = express();

// CORS configuration - Allow all origins for now to test
const corsOptions = {
  origin: true, // Allow all origins temporarily
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(express.json());

// Handle preflight requests explicitly
app.options('*', cors(corsOptions));

// Simple in-memory storage for testing (will be replaced with MongoDB once working)
let jobs = [
  {
    _id: "1",
    title: "Frontend Developer",
    company: "Tech Corp",
    location: "Remote",
    description: "Looking for a skilled frontend developer with React experience.",
    requirements: ["React", "JavaScript", "CSS"],
    createdAt: new Date().toISOString()
  },
  {
    _id: "2",
    title: "Backend Developer", 
    company: "StartupXYZ",
    location: "New York",
    description: "Join our backend team to build scalable APIs.",
    requirements: ["Node.js", "MongoDB", "Express"],
    createdAt: new Date().toISOString()
  }
];

let applications = [];

// Root route - API status
app.get("/", (req, res) => {
  res.json({
    message: "Job Site API is running!",
    version: "1.0.1",
    endpoints: {
      jobs: "/jobs",
      applications: "/applications"
    },
    status: "healthy",
    mode: "memory-storage",
    timestamp: new Date().toISOString()
  });
});

// GET /jobs - list all jobs
app.get("/jobs", (req, res) => {
  try {
    res.json(jobs);
  } catch (err) {
    console.error("Error fetching jobs:", err);
    res.status(500).json({ error: "Failed to fetch jobs", details: err.message });
  }
});

// GET /jobs/:id - get a specific job
app.get("/jobs/:id", (req, res) => {
  try {
    const job = jobs.find(j => j._id === req.params.id);
    if (!job) {
      return res.status(404).json({ error: "Job not found" });
    }
    res.json(job);
  } catch (err) {
    console.error("Error fetching job:", err);
    res.status(500).json({ error: "Failed to fetch job", details: err.message });
  }
});

// POST /jobs - add a job
app.post("/jobs", (req, res) => {
  try {
    const newJob = {
      _id: String(jobs.length + 1),
      ...req.body,
      createdAt: new Date().toISOString()
    };
    jobs.push(newJob);
    res.status(201).json(newJob);
  } catch (err) {
    console.error("Error creating job:", err);
    res.status(400).json({ error: "Failed to create job", details: err.message });
  }
});

// PUT /jobs/:id - update a job
app.put("/jobs/:id", (req, res) => {
  try {
    const index = jobs.findIndex(j => j._id === req.params.id);
    if (index === -1) {
      return res.status(404).json({ error: "Job not found" });
    }
    jobs[index] = { ...jobs[index], ...req.body };
    res.json(jobs[index]);
  } catch (err) {
    console.error("Error updating job:", err);
    res.status(400).json({ error: "Failed to update job", details: err.message });
  }
});

// DELETE /jobs/:id - delete a job
app.delete("/jobs/:id", (req, res) => {
  try {
    const index = jobs.findIndex(j => j._id === req.params.id);
    if (index === -1) {
      return res.status(404).json({ error: "Job not found" });
    }
    jobs.splice(index, 1);
    
    // Also delete related applications
    applications = applications.filter(app => app.jobId !== req.params.id);
    
    res.json({ message: "Job and related applications deleted successfully" });
  } catch (err) {
    console.error("Error deleting job:", err);
    res.status(500).json({ error: "Failed to delete job", details: err.message });
  }
});

// POST /jobs/:id/apply - apply for a job
app.post("/jobs/:id/apply", (req, res) => {
  try {
    const jobId = req.params.id;
    const { name, email, resumeUrl } = req.body;

    // Validate required fields
    if (!name || !email) {
      return res.status(400).json({ error: "Name and email are required" });
    }

    const application = {
      _id: String(applications.length + 1),
      jobId,
      name,
      email,
      resumeUrl: resumeUrl || null,
      createdAt: new Date().toISOString()
    };

    applications.push(application);
    res.status(201).json({ message: "Application saved", application });
  } catch (err) {
    console.error("Error saving application:", err);
    res.status(500).json({ error: "Server error", details: err.message });
  }
});

// GET /applications - list all applications
app.get("/applications", (req, res) => {
  try {
    res.json(applications);
  } catch (err) {
    console.error("Error fetching applications:", err);
    res.status(500).json({ error: "Failed to fetch applications", details: err.message });
  }
});

// Export for Vercel serverless
export default app;